# 루트 백만 = 1000
# 1000 이하의 소수의 배수를 제거하면 남은 모든 수는 소수
prime_1000 = [
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
    103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
    211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
    331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 
    449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
    587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
    709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
    853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
    991, 997
    ]

primes = [2]    # 소수를 저장할 리스트
check = ['y'] * 1000001    # 소수 여부를 판별하는 리스트
for i in prime_1000:
    
    # 1000 이하의 소수 의 배수를 확인하여 본인을 제외한 나머지 'n'처리
    for n in range(i, 1000001, i):
        if n != i:
            check[n] = 'n'

# 남은 'y' 번째 숫자는 소수 리스트에 추가
for j in range(3, 1000001, 2):
    if check[j] == 'y':
        primes.append(j)

def tenes_prime():
    D, st, ed = list(map(int, input().split()))

    tenes = 0
    # 소수 리스트 중 해당 범위 내 테네스의 숫자가 존재하는지를 str()을 사용하여 확인
    for n in primes:
        if st <= n  <= ed and str(D) in str(n):
            tenes += 1

    return tenes

case_num = int(input())

for case in range(case_num):
    print(f'#{case+1} {tenes_prime()}')