'''
아이디어
1. 10 단위로 1의 자리 숫자는 1번씩 반복 됨
    1-1) 마지막 숫자를 9로 변경 후 1의 자리 숫자 개수 계산
        ex) 512 >> 519 >> 1의 자리 숫자 반복 횟수 == 52 == 51 + 1
    1-2) 원본 마지막 숫자 다음 숫자 ~ 9까지 하나씩 제거
        ex) 3 ~ 9까지 -1 적용
    1-3) 페이지는 1부터 시작 >> 0 하나 제거
        ex) 0도 -1 적용
    1-4) 1의 자리 숫자를 제외 한 숫자(10의 자리 이상)들은 1의 자리 숫자 만큼 덜 반복
        ex) 512의 100의 자리 5, 10의 자리 1은 -7 적용

2. 원 숫자를 10의자리 부터 확인하여 1의자리 숫자와 동일한 계산식 적용
    ex) 1. 512(1의 자리 숫자 확인) >> 2. 51(10의 자리 숫자 확인) >> 3. 5(100의 자리 숫자 확인)
'''
N = input()

ans = [0] * 10
# 현재 계산중인 자리 수
place = 1
for _ in range(len(N)):
    # 마지막 숫자 9로 변환
    # 변환 수와 원본 수 차이 저장
    re_n = int(N[:-1] + '9')
    gap = re_n - int(N)
    
    # 각 숫자 반복횟수 누적
    for i in range(10):
        # N이 한자리 수인 경우 현재 계산중인 자리 수 누적
        if len(N) == 1:
            ans[i] += place
        else:
            ans[i] += ((int(N[:-1]) + 1) * place)
    
    # 마지막 숫자 다음 숫자 ~ 9까지 현재 계산중인 자리 수 차감
    for j in range(10 - gap, 10):
        ans[j] -= place

    # 현재 계산하는 자리 이상의 자리 숫자들의 카운트 차감
    for n in N[:-1]:
        ans[int(n)] -= (gap * place)

    # 1부터 시작임으로 0의 반복 횟수 제거
    # N의 마지막 자리 제거
    # 계산할 자리 수 수정
    ans[0] -= place
    N = N[:-1]
    place *= 10

print(' '.join(map(str, ans)))
